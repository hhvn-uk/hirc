#!/bin/sh

CC=${CC:-cc}

trap "rm -f test.c test" EXIT
echo "# Generated by configure" > config.mk

printf '%s' "checking for libtls... "
cat > test.c <<- EOF
	#include <tls.h>
	int main(void) { return 0; }
EOF
${CC} -ltls -o test test.c >/dev/null 2>/dev/null && {
	printf '%s\n' "yes"
	cat >> config.mk <<- EOF
		# libretls or libtls (standalone tls.h implementation) configuration
		LDFLAGS	+= -ltls
		CFLAGS	+= -DTLS
	EOF
} || {
	printf '%s\n' "no"
	cat >> config.mk <<- EOF
		# no TLS configured
		# install libretls or libtls (standalone tls.h implementation) for TLS
	EOF
}

printf '%s' "checking for libtinfow... "
cat > test.c <<- EOF
	#include <ncurses.h>
	int main(void) { return 0; }
EOF
${CC} -ltinfow -o test test.c >/dev/null 2>/dev/null && {
	printf '%s\n' "yes"
	cat >> config.mk <<- EOF
		# linking with tinfow
		# on some systems both ncursesw and tinfow must be linked
		# otherwise, thank ncurses for the nondescript segfault in initscr()...
		LDFLAGS += -ltinfow
	EOF
} || {
	printf '%s\n' "no"
}

printf '%s' "checking for strlcpy... "
cat > test.c <<- EOF
	#include <string.h>
	int main(void) { char a[2]; strlcpy(a, "hello", sizeof(a)); return 0; }
EOF
${CC} -o test test.c >/dev/null 2>/dev/null && ./test >/dev/null 2>/dev/null && {
	printf '%s\n' "yes"
} || {
	printf '%s\n' "no"
	cat >> config.mk <<- EOF
		# linking an included version of strlcpy, as your system doesn't have it
		CFLAGS	+= -DHIRC_STRLCPY
		SRC	+= src/strlcpy.c
	EOF
}

printf '%s' "checking for wcslcpy... "
cat > test.c <<- EOF
	#include <wchar.h>
	int main(void) { wchar_t a[2]; wcslcpy(a, L"hello", sizeof(a)); return 0; }
EOF
${CC} -o test test.c >/dev/null 2>/dev/null && ./test >/dev/null 2>/dev/null && {
	printf '%s\n' "yes"
} || {
	printf '%s\n' "no"
	cat >> config.mk <<- EOF
		# linking an included version of wcslcpy, as your system doesn't have it
		CFLAGS	+= -DHIRC_WCSLCPY
		SRC	+= src/wcslcpy.c
	EOF
}
