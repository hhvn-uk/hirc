#!/bin/sh
#
# configure from hirc
#
# Copyright (c) 2021-2022 hhvn <dev@hhvn.uk>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

CC=${CC:-cc}

trap "rm -f test.c test" EXIT
echo "# Generated by configure" > config.mk

printf '%s' "checking for libtls... "
cat > test.c <<- EOF
	#include <tls.h>
	int main(void) { return 0; }
EOF
${CC} -ltls -o test test.c >/dev/null 2>/dev/null && {
	printf '%s\n' "yes"
	cat >> config.mk <<- EOF
		# libretls or libtls (standalone tls.h implementation) configuration
		LDFLAGS	+= -ltls
		CFLAGS	+= -DTLS
	EOF
} || {
	printf '%s\n' "no"
	cat >> config.mk <<- EOF
		# no TLS configured
		# install libretls or libtls (standalone tls.h implementation) for TLS
	EOF
}

printf '%s' "checking for libtinfow... "
cat > test.c <<- EOF
	#include <ncurses.h>
	int main(void) { return 0; }
EOF
${CC} -ltinfow -o test test.c >/dev/null 2>/dev/null && {
	printf '%s\n' "yes"
	cat >> config.mk <<- EOF
		# linking with tinfow
		# on some systems both ncursesw and tinfow must be linked
		# otherwise, thank ncurses for the nondescript segfault in initscr()...
		LDFLAGS += -ltinfow
	EOF
} || {
	printf '%s\n' "no"
}

printf '%s' "checking for strlcpy... "
cat > test.c <<- EOF
	#include <string.h>
	int main(void) { char a[2]; strlcpy(a, "hello", sizeof(a)); return 0; }
EOF
${CC} -o test test.c >/dev/null 2>/dev/null && ./test >/dev/null 2>/dev/null && {
	printf '%s\n' "yes"
} || {
	printf '%s\n' "no"
	cat >> config.mk <<- EOF
		# linking an included version of strlcpy, as your system doesn't have it
		CFLAGS	+= -DHIRC_STRLCPY
		SRC	+= src/openbsd/strlcpy.c
	EOF
}

printf '%s' "checking for strlcat... "
cat > test.c <<- EOF
	#include <string.h>
	int main(void) { char a[3] = {'a', '\0', '\0'}; strlcat(a, "bc", sizeof(a)); return 0; }
EOF
${CC} -o test test.c >/dev/null 2>/dev/null && ./test >/dev/null 2>/dev/null && {
	printf '%s\n' "yes"
} || {
	printf '%s\n' "no"
	cat >> config.mk <<- EOF
		# linking an included version of strlcat, as your system doesn't have it
		CFLAGS	+= -DHIRC_STRLCAT
		SRC	+= src/openbsd/strlcat.c
	EOF
}

printf '%s' "checking for wcslcpy... "
cat > test.c <<- EOF
	#include <wchar.h>
	int main(void) { wchar_t a[2]; wcslcpy(a, L"hello", sizeof(a)); return 0; }
EOF
${CC} -o test test.c >/dev/null 2>/dev/null && ./test >/dev/null 2>/dev/null && {
	printf '%s\n' "yes"
} || {
	printf '%s\n' "no"
	cat >> config.mk <<- EOF
		# linking an included version of wcslcpy, as your system doesn't have it
		CFLAGS	+= -DHIRC_WCSLCPY
		SRC	+= src/openbsd/wcslcpy.c
	EOF
}
